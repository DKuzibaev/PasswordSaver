package main

import (
	"errors"
	"fmt"
	"math/rand/v2"
	"net/url"
	"time"
)

var LetterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-*!")

type account struct {
	login    string
	password string
	url      string
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞—Å–ª–µ–¥—É–µ—Ç account)
type accountWithTimeStamp struct {
	createdAt time.Time
	updatedAt time.Time
	account
}

// –ú–ï–¢–û–î –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ê–†–û–õ–Ø
func (acc *account) generatePassword(n int) {
	newGenPassword := make([]rune, n)
	for i := range newGenPassword {
		newGenPassword[i] = LetterRunes[rand.IntN(len(LetterRunes))]
	}
	acc.password = string(newGenPassword)
}

// –ú–ï–¢–û–î –î–õ–Ø –í–´–í–û–î–ê –î–ê–ù–ù–´–•
func (acc *account) outputPassword() {
	// –ü—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	fmt.Println("üîë –õ–æ–≥–∏–Ω:", acc.login)
	fmt.Println("üîí –ü–∞—Ä–æ–ª—å:", acc.password)
	fmt.Println("üåê –°–∞–π—Ç:", acc.url)
}

// –ö–û–ù–°–¢–†–£–ö–¢–û–† –î–õ–Ø –û–°–ù–û–í–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ (account)
func newAccount(login, password, urlString string) (*account, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
	if login == "" {
		return nil, errors.New("–õ–û–ì–ò–ù –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú")
	}

	_, err := url.ParseRequestURI(urlString)
	if err != nil {
		return nil, errors.New("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô URL")
	}

	newAcc := &account{
		login:    login,
		password: password,
		url:      urlString,
	}

	if password == "" {
		newAcc.generatePassword(12)
	}

	return newAcc, nil
}

// –ö–û–ù–°–¢–†–£–ö–¢–û–† –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ (accountWithTimeStamp)
func newAccountWithTimeStamp(login, password, urlString string) (*accountWithTimeStamp, error) {
	// –¢–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∏ –≤—ã—à–µ
	if login == "" {
		return nil, errors.New("–õ–û–ì–ò–ù –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú")
	}

	_, err := url.ParseRequestURI(urlString)
	if err != nil {
		return nil, errors.New("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô URL")
	}

	newAcc := &accountWithTimeStamp{
		account: account{
			login:    login,
			password: password,
			url:      urlString,
		},
		createdAt: time.Now(),
		updatedAt: time.Now(),
	}

	if password == "" {
		newAcc.generatePassword(12)
	}

	return newAcc, nil
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É)
func main() {
	login := promtData("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
	password := promtData("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏):")
	url := promtData("–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞:")

	myAccount, err := newAccountWithTimeStamp(login, password, url)
	if err != nil {
		fmt.Println("üí• –û–®–ò–ë–ö–ê:", err)
		return
	}

	myAccount.outputPassword()
	fmt.Println("‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", myAccount.createdAt.Format("2006-01-02 15:04:05"))
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–í–û–î–ê –î–ê–ù–ù–´–•
func promtData(prompt string) string {
	fmt.Print(prompt + " ")
	var res string
	fmt.Scanln(&res)
	return res
}
