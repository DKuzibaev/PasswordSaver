package main

import (
	"errors"
	"fmt"
	"math/rand/v2"
	"net/url"
	"time"
)

// –ë—É–∫–≤—ã –∏ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
var LetterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-*!")

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–∫ "–∫–æ—Ä–æ–±–∫–∞" –¥–ª—è –¥–∞–Ω–Ω—ã—Ö)
type account struct {
	login    string // —è—â–∏–∫ –¥–ª—è –ª–æ–≥–∏–Ω–∞
	password string // —è—â–∏–∫ –¥–ª—è –ø–∞—Ä–æ–ª—è
	url      string // —è—â–∏–∫ –¥–ª—è —Å–∞–π—Ç–∞
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞—Å–ª–µ–¥—É–µ—Ç account)
type accountWithTimeStamp struct {
	createdAt time.Time // –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–ø–∏—Å—å
	updatedAt time.Time // –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–ª–∏
	account             // –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–≤—Å—ë —á—Ç–æ –µ—Å—Ç—å –≤ account)
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –ú–ï–¢–û–î –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ê–†–û–õ–Ø
// (–ø—Ä–∏–∫–ª–µ–µ–Ω –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ account)
//
// (acc *account) - —Ä–∞–±–æ—Ç–∞–µ–º —Å –û–†–ò–ì–ò–ù–ê–õ–û–ú —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∞ –Ω–µ –∫–æ–ø–∏–µ–π
// n int - –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
// –ù–ò–ß–ï–ì–û –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (–Ω–µ—Ç 'string' –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏)
func (acc *account) generatePassword(n int) {
	// 1. –°–æ–∑–¥–∞—ë–º "–ø—É—Å—Ç—É—é –∫–æ—Ä–æ–±–∫—É" –¥–ª—è —Ä—É–Ω (—Å–∏–º–≤–æ–ª–æ–≤)
	newGenPassword := make([]rune, n)

	// 2. –ù–∞–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä–æ–±–∫—É —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
	for i := range newGenPassword {
		newGenPassword[i] = LetterRunes[rand.IntN(len(LetterRunes))]
	}

	// 3. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ä—É–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –∏ –∫–ª–∞–¥—ë–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	acc.password = string(newGenPassword)
	// return –Ω–µ –Ω—É–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –ú–ï–¢–û–î –î–õ–Ø –í–´–í–û–î–ê –î–ê–ù–ù–´–•
// (–ø—Ä–∏–∫–ª–µ–µ–Ω –∫ account)
func (acc *account) outputPassword() {
	// –ü—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	fmt.Println("üîë –õ–æ–≥–∏–Ω:", acc.login)
	fmt.Println("üîí –ü–∞—Ä–æ–ª—å:", acc.password)
	fmt.Println("üåê –°–∞–π—Ç:", acc.url)
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –ö–û–ù–°–¢–†–£–ö–¢–û–† –î–õ–Ø –û–°–ù–û–í–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ (account)
// (—ç—Ç–æ –Ω–µ –º–µ—Ç–æ–¥, –∞ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - *account (—É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
//   - error (–æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
func newAccount(login, password, urlString string) (*account, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
	if login == "" {
		return nil, errors.New("–õ–û–ì–ò–ù –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º URL (–≤–∞–ª–∏–¥–Ω—ã–π –ª–∏ –æ–Ω)
	_, err := url.ParseRequestURI(urlString)
	if err != nil {
		return nil, errors.New("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô URL")
	}

	// –°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç (—Å —É–∫–∞–∑–∞—Ç–µ–ª–µ–º &)
	newAcc := &account{
		login:    login,
		password: password,
		url:      urlString,
	}

	// –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	if password == "" {
		newAcc.generatePassword(12) // –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	}

	return newAcc, nil // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ nil (–Ω–µ—Ç –æ—à–∏–±–∫–∏)
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –ö–û–ù–°–¢–†–£–ö–¢–û–† –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ (accountWithTimeStamp)
func newAccountWithTimeStamp(login, password, urlString string) (*accountWithTimeStamp, error) {
	// –¢–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∏ –≤—ã—à–µ
	if login == "" {
		return nil, errors.New("–õ–û–ì–ò–ù –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–£–°–¢–´–ú")
	}

	_, err := url.ParseRequestURI(urlString)
	if err != nil {
		return nil, errors.New("–ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô URL")
	}

	// –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
	newAcc := &accountWithTimeStamp{
		account: account{ // –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
			login:    login,
			password: password,
			url:      urlString,
		},
		createdAt: time.Now(), // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
		updatedAt: time.Now(), // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	}

	// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if password == "" {
		newAcc.generatePassword(12) // —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
	}

	return newAcc, nil
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É)
func main() {
	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	login := promtData("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
	password := promtData("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏):")
	url := promtData("–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞:")

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
	myAccount, err := newAccountWithTimeStamp(login, password, url)
	// –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ - –ø–µ—á–∞—Ç–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
	if err != nil {
		fmt.Println("üí• –û–®–ò–ë–ö–ê:", err)
		return // –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	myAccount.outputPassword()
	fmt.Println("‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", myAccount.createdAt.Format("2006-01-02 15:04:05"))
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–í–û–î–ê –î–ê–ù–ù–´–•
func promtData(prompt string) string {
	fmt.Print(prompt + " ")
	var res string
	fmt.Scanln(&res) // —á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	return res
}
